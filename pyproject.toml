[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "slack-ai-agent"
dynamic = ["version"]
description = "A Slack AI agent that uses LangChain and LangGraph to execute agentic workflows."
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
  { name = "Kevin Pilch", email = "kev.pilch@gmail.com" },
]
dependencies = [
  "langchain_openai" ,
  "langgraph" ,
  "trustcall" ,
  "langchain_core"
]

[project.urls]
Documentation = "https://github.com/Kevin Pilch/slack-ai-agent#readme"
Issues = "https://github.com/Kevin Pilch/slack-ai-agent/issues"
Source = "https://github.com/Kevin Pilch/slack-ai-agent"

[tool.hatch.version]
path = "src/slack_ai_agent/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "pre-commit",     # Pre-commit hooks for automated checks
  "black",          # Code formatter for consistency
  "ruff",           # Linter for style and error checking
  "mypy",           # Static type checking
  "pytest",         # Unit testing framework
  "pytest-cov",     # Plugin for pytest to measure test coverage
  "bandit",         # Security scanner to detect vulnerabilities
]

[tool.hatch.envs.default.scripts]
test = "pytest --cov=src tests"
lint = "ruff src tests"
type-check = "mypy slack-ai-agent"
format = "black src tests"
security-scan = "bandit -r src"
precommit = "pre-commit run --all-files"

[tool.black]
line-length = 88
target-version = ["py311"]

[tool.ruff]
select = ["E", "F", "W", "C", "B"]  # Linting rules (errors, warnings, best practices)
ignore = ["E501"]  # Ignore long lines (handled by Black)
line-length = 88

[tool.mypy]
python_version = 3.11
strict = true
files = ["src", "tests"]

[tool.pytest.ini_options]
addopts = "--strict-markers"
testpaths = ["tests"]

[tool.bandit]
skips = ["B101"]
